(pr_ack
 (copy_init_TCC1 0
  (copy_init_TCC1-1 nil 3757185002 ("" (subtype-tcc) nil nil) nil nil))
 (max_nats_TCC1 0
  (max_nats_TCC1-1 nil 3757409958 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (pi_TCC1 0
  (pi_TCC1-1 nil 3756843421 ("" (subtype-tcc) nil nil) nil nil))
 (pr_TCC1 0
  (pr_TCC1-1 nil 3756843421 ("" (subtype-tcc) nil nil) nil nil))
 (pr_TCC2 0
  (pr_TCC2-1 nil 3756843421 ("" (subtype-tcc) nil nil) nil nil))
 (pr_TCC3 0
  (pr_TCC3-1 nil 3756843421 ("" (subtype-tcc) nil nil) nil nil))
 (pr_TCC4 0
  (pr_TCC4-1 nil 3756843421 ("" (subtype-tcc) nil nil) nil nil))
 (pr_TCC5 0
  (pr_TCC5-1 nil 3756843421 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Index type-eq-decl nil arrays "structures/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (pr_TCC6 0
  (pr_TCC6-1 nil 3756843421 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (addition_args 0
  (addition_args-1 nil 3756887490
   ("" (skolem!)
    (("" (skolem!)
      (("" (skolem!)
        (("" (expand "init_nats") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((init_nats const-decl "nat_args(k)" pr_ack nil)) shostak))
 (arr_helper_lemma 0
  (arr_helper_lemma-1 nil 3757145077
   ("" (skolem!)
    (("" (flatten)
      (("" (assert)
        (("" (decompose-equality)
          (("" (case "x!1=0 OR x!1=1")
            (("1" (split)
              (("1" (replace -1) (("1" (assert) nil nil)) nil)
               ("2" (replace -1) (("2" (assert) nil nil)) nil))
              nil)
             ("2" (typepred "x!1") (("2" (smash) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Index type-eq-decl nil arrays "structures/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat_args nonempty-type-eq-decl nil pr_ack nil))
   shostak))
 (pr_add_is_addition 0
  (pr_add_is_addition-1 nil 3756843440
   ("" (skolem!)
    (("" (induct "m")
      (("1" (expand "pr_add")
        (("1" (expand "pr_add_arr")
          (("1" (expand "pr")
            (("1" (expand "g_add")
              (("1" (expand "pi")
                (("1" (expand "copy_init") (("1" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skolem!)
        (("2" (flatten)
          (("2" (expand "pr_add")
            (("2" (expand "pr_add_arr")
              (("2" (lemma "addition_args")
                (("2" (expand "pr" 1)
                  (("2" (inst -1 "j!1" "n!1" "1 + j!1")
                    (("2" (expand "h_add")
                      (("2" (expand "pi_arr_add")
                        (("2" (expand "init_with")
                          (("2" (expand "compose")
                            (("2" (expand "pi")
                              (("2"
                                (expand "pr_succ")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((addition_args formula-decl nil pr_ack nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (compose const-decl "rfunc(k)" pr_ack nil)
    (pr_succ const-decl "nat" pr_ack nil)
    (init_with const-decl "ArrayOf[T]" arrays "structures/")
    (h_add const-decl "rfunc(3)" pr_ack nil)
    (pr def-decl "nat" pr_ack nil) (pi const-decl "nat" pr_ack nil)
    (copy_init const-decl "nat_args(l)" pr_ack nil)
    (g_add const-decl "rfunc(1)" pr_ack nil)
    (pr_add_arr const-decl "nat" pr_ack nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (pr_add const-decl "nat" pr_ack nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (pr_add_arr_is_addition 0
  (pr_add_arr_is_addition-1 nil 3757143523
   ("" (skolem!)
    (("" (lemma "pr_add_is_addition")
      (("" (inst - "a!1(0)" "a!1(1)")
        (("" (expand "pr_add")
          (("" (assert)
            (("" (expand "pr_add_arr")
              (("" (case "a!1(1)=0")
                (("1" (expand "pr")
                  (("1" (expand "g_add")
                    (("1" (expand "pi")
                      (("1" (assert)
                        (("1" (expand "copy_init")
                          (("1" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "pr")
                  (("2" (expand "h_add")
                    (("2" (expand "pr_succ")
                      (("2" (expand "compose")
                        (("2" (assert)
                          (("2" (lemma "arr_helper_lemma")
                            (("2" (inst - "a!1")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Index type-eq-decl nil arrays "structures/")
    (nat_args nonempty-type-eq-decl nil pr_ack nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (g_add const-decl "rfunc(1)" pr_ack nil)
    (copy_init const-decl "nat_args(l)" pr_ack nil)
    (pi const-decl "nat" pr_ack nil) (pr def-decl "nat" pr_ack nil)
    (h_add const-decl "rfunc(3)" pr_ack nil)
    (compose const-decl "rfunc(k)" pr_ack nil)
    (arr_helper_lemma formula-decl nil pr_ack nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (pr_succ const-decl "nat" pr_ack nil)
    (pr_add_arr const-decl "nat" pr_ack nil)
    (pr_add const-decl "nat" pr_ack nil)
    (pr_add_is_addition formula-decl nil pr_ack nil))
   shostak))
 (pr_mult_is_multiplication 0
  (pr_mult_is_multiplication-1 nil 3757156849
   ("" (skolem!)
    (("" (induct "m")
      (("1" (expand "pr_mult")
        (("1" (expand "pr")
          (("1" (expand "g_mult")
            (("1" (expand "zero") (("1" (propax) nil nil)) nil)) nil))
          nil))
        nil)
       ("2" (skolem!)
        (("2" (flatten)
          (("2" (expand "pr_mult")
            (("2" (expand pr 1)
              (("2" (replace -1)
                (("2" (expand h_mult 1)
                  (("2" (expand compose 1)
                    (("2" (lemma "pr_add_arr_is_addition")
                      (("2" (assert)
                        (("2" (expand "pi_arr_mult" 1)
                          (("2" (expand "init_with")
                            (("2" (expand "pi")
                              (("2"
                                (assert)
                                (("2"
                                  (inst
                                   -1
                                   "LAMBDA (i: Index[2]):
                   (LAMBDA (i: Index[2]): LAMBDA (a: nat_args(3)): a(0))
                     WITH [(1) := LAMBDA (a: nat_args(3)): a(2)]
                       (i)
                       (init_nats(2)
                          WITH [(0) := n!1,
                                (1) := j!1,
                                (2) |-> n!1 * j!1])")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (compose const-decl "rfunc(k)" pr_ack nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (init_with const-decl "ArrayOf[T]" arrays "structures/")
    (< const-decl "bool" reals nil)
    (Index type-eq-decl nil arrays "structures/")
    (nat_args nonempty-type-eq-decl nil pr_ack nil)
    (init_nats const-decl "nat_args(k)" pr_ack nil)
    (pi const-decl "nat" pr_ack nil)
    (pi_arr_mult const-decl "ArrayOf[2][rfunc(3)]" pr_ack nil)
    (pr_add_arr_is_addition formula-decl nil pr_ack nil)
    (h_mult const-decl "rfunc(3)" pr_ack nil)
    (g_mult const-decl "rfunc(1)" pr_ack nil)
    (zero const-decl "nat" pr_ack nil) (pr def-decl "nat" pr_ack nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (pr_mult const-decl "nat" pr_ack nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (prim_rec?_TCC1 0
  (prim_rec?_TCC1-1 nil 3757233482 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (prim_rec?_TCC2 0
  (prim_rec?_TCC2-1 nil 3757233482 ("" (subtype-tcc) nil nil) nil nil))
 (prim_rec?_TCC3 0
  (prim_rec?_TCC3-1 nil 3757233482 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (prim_rec_TCC1 0
  (prim_rec_TCC1-1 nil 3757237789
   ("" (skolem!)
    (("" (expand "prim_rec?") (("" (propax) nil nil)) nil)) nil)
   ((prim_rec? inductive-decl "bool" pr_ack nil)) nil))
 (ack_TCC1 0
  (ack_TCC1-1 nil 3757238275 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (ack_TCC2 0
  (ack_TCC2-1 nil 3757238275 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< def-decl "bool" ordinals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (lex2 const-decl "ordinal" lex2 nil))
   nil))
 (ack_TCC3 0
  (ack_TCC3-1 nil 3757238275 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (ack_TCC4 0
  (ack_TCC4-1 nil 3757238275 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (ack_TCC5 0
  (ack_TCC5-1 nil 3757238275 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< def-decl "bool" ordinals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (lex2 const-decl "ordinal" lex2 nil))
   nil))
 (ack_TCC6 0
  (ack_TCC6-1 nil 3757238275 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< def-decl "bool" ordinals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (lex2 const-decl "ordinal" lex2 nil))
   nil))
 (ack_prop4 0
  (ack_prop4-1 nil 3757327620
   ("" (induct "x")
    (("1" (skolem!) (("1" (expand "ack") (("1" (assert) nil nil)) nil))
      nil)
     ("2" (skolem 1 "x0")
      (("2" (flatten)
        (("2" (induct "y")
          (("1" (expand "ack" 1)
            (("1" (assert)
              (("1" (inst -1 "1") (("1" (assert) nil nil)) nil)) nil))
            nil)
           ("2" (skolem 1 "y0")
            (("2" (flatten)
              (("2" (expand "ack" 1)
                (("2" (inst -2 "ack(x0+1, y0)")
                  (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (< const-decl "bool" reals nil) (ack def-decl "nat" pr_ack nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (ack_prop5_base 0
  (ack_prop5_base-1 nil 3757398856
   ("" (induct "x")
    (("1" (skolem 1 "y0")
      (("1" (expand "ack") (("1" (assert) nil nil)) nil)) nil)
     ("2" (skolem 1 "x0")
      (("2" (flatten)
        (("2" (skolem 1 "y0")
          (("2" (expand "ack" 1 2)
            (("2" (lemma "ack_prop4")
              (("2" (inst -1 "x0" "ack(1 + x0, y0)") nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (< const-decl "bool" reals nil) (ack def-decl "nat" pr_ack nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (ack_prop4 formula-decl nil pr_ack nil))
   shostak))
 (ack_prop5_diff 0
  (ack_prop5_diff-1 nil 3757399284
   ("" (induct "d")
    (("1" (skolem 1 ("x0" "y0" "y_0"))
      (("1" (flatten)
        (("1" (lemma "ack_prop5_base")
          (("1" (replace -2)
            (("1" (inst - "x0" "y0") (("1" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 "d0")
      (("2" (flatten)
        (("2" (skolem 1 ("x0" "y0" "y_0"))
          (("2" (flatten)
            (("2" (replace -2)
              (("2" (lemma "ack_prop5_base")
                (("2" (inst -1 "x0" "y0 + d0 + 1")
                  (("2" (assert)
                    (("2" (inst -2 "x0" "y0" "y0 + d0 + 1")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil) (ack def-decl "nat" pr_ack nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ack_prop5_base formula-decl nil pr_ack nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (ack_prop5 0
  (ack_prop5-1 nil 3757359859
   ("" (lemma "ack_prop5_diff")
    (("" (skolem 1 "x0")
      (("" (skolem 1 "y0")
        (("" (skolem 1 "y_0")
          (("" (inst -1 "y_0 - y0 - 1" "x0" "y0" "y_0")
            (("1" (flatten) (("1" (assert) nil nil)) nil)
             ("2" (flatten) (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ack_prop5_diff formula-decl nil pr_ack nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (ack_prop6 0
  (ack_prop6-1 nil 3757400679
   ("" (skolem 1 "x0")
    (("" (induct "y")
      (("1" (assert)
        (("1" (expand "ack" 1 2) (("1" (assert) nil nil)) nil)) nil)
       ("2" (skolem 1 "y0")
        (("2" (flatten)
          (("2" (lemma "ack_prop4")
            (("2" (inst -1 "x0" "y0 + 1")
              (("2" (assert)
                (("2" (lemma "ack_prop5")
                  (("2" (inst -1 "x0" "y0 + 2" "ack(x0 + 1, y0)")
                    (("2" (assert)
                      (("2" (expand "ack" 1 2) (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ack_prop4 formula-decl nil pr_ack nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ack_prop5 formula-decl nil pr_ack nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (ack def-decl "nat" pr_ack nil) (<= const-decl "bool" reals nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (ack_prop7_base 0
  (ack_prop7_base-1 nil 3757401271
   ("" (lemma "ack_prop5")
    (("" (lemma "ack_prop6")
      (("" (skolem 1 "x0")
        (("" (skolem 1 "y0")
          (("" (inst -2 "x0" "y0" "y0 + 1")
            (("" (assert)
              (("" (inst -1 "x0" "y0") (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ack_prop5 formula-decl nil pr_ack nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ack_prop6 formula-decl nil pr_ack nil))
   shostak))
 (ack_prop7_diff 0
  (ack_prop7_diff-1 nil 3757401682
   ("" (induct "d")
    (("1" (skolem 1 ("x0" "x_0" "y0"))
      (("1" (flatten)
        (("1" (assert)
          (("1" (lemma "ack_prop7_base")
            (("1" (inst -1 "x0" "y0") (("1" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 "d0")
      (("2" (flatten)
        (("2" (skolem 1 ("x0" "x_0" "y0"))
          (("2" (flatten)
            (("2" (lemma "ack_prop7_base")
              (("2" (assert)
                (("2" (replace -3)
                  (("2" (assert)
                    (("2" (inst -1 "x0 + d0 + 1" "y0")
                      (("2" (assert)
                        (("2" (inst -2 "x0" "x0 + d0 + 1" "y0")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil) (ack def-decl "nat" pr_ack nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (ack_prop7_base formula-decl nil pr_ack nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (ack_prop7 0
  (ack_prop7-1 nil 3757401928
   ("" (lemma "ack_prop7_diff")
    (("" (skolem 1 "x0")
      (("" (skolem 1 "x_0")
        (("" (skolem 1 "y0")
          (("" (flatten)
            (("" (inst -1 "x_0 - x0 - 1" "x0" "x_0" "y0")
              (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ack_prop7_diff formula-decl nil pr_ack nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (ack_prop8 0
  (ack_prop8-1 nil 3757402354
   ("" (induct "y")
    (("1" (expand "ack")
      (("1" (expand "ack") (("1" (propax) nil nil)) nil)) nil)
     ("2" (skolem 1 "y0")
      (("2" (flatten)
        (("2" (assert)
          (("2" (expand "ack" 1)
            (("2" (replace -1)
              (("2" (expand "ack" 1) (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ack def-decl "nat" pr_ack nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (ack_prop9 0
  (ack_prop9-1 nil 3757402444
   ("" (induct "y")
    (("1" (lemma "ack_prop8")
      (("1" (expand "ack" 1)
        (("1" (inst - "1") (("1" (assert) nil nil)) nil)) nil))
      nil)
     ("2" (skolem 1 "y0")
      (("2" (flatten)
        (("2" (assert)
          (("2" (expand "ack" 1)
            (("2" (replace -1)
              (("2" (assert)
                (("2" (expand "ack" 1)
                  (("2" (assert)
                    (("2" (lemma "ack_prop8")
                      (("2" (inst -1 "2 + 2 * y0")
                        (("2" (assert)
                          (("2" (replace -1)
                            (("2" (expand "ack" 1)
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ack def-decl "nat" pr_ack nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (ack_prop8 formula-decl nil pr_ack nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (ack_prop10 0
  (ack_prop10-1 nil 3757405319
   ("" (skolem 1 ("x0" "x_0"))
    (("" (lemma "ack_prop5")
      (("" (lemma "ack_prop7")
        (("" (copy -1)
          (("" (lemma "ack_prop6")
            (("" (inst 1 "x0 + x_0 + 2")
              (("" (skolem 1 "y0")
                (("" (inst -2 "x0" "x0 + x_0" "ack(x_0, y0)")
                  (("" (inst -3 "x_0" "x0 + x_0 + 1" "y0")
                    (("" (assert)
                      ((""
                        (inst -4 "x0 + x_0" "ack(x_0, y0)"
                         "ack(1 + x0 + x_0, y0)")
                        (("" (assert)
                          (("" (inst -1 "x0 + x_0 + 1" "y0")
                            (("" (assert)
                              ((""
                                (expand "ack" -1 1)
                                (("" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ack_prop7 formula-decl nil pr_ack nil)
    (ack_prop6 formula-decl nil pr_ack nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (ack def-decl "nat" pr_ack nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (ack_prop5 formula-decl nil pr_ack nil))
   shostak))
 (ack_prop10_constant 0
  (ack_prop10_constant-1 nil 3757509799
   ("" (skolem 1 ("x0" "x_0" "y0"))
    (("" (lemma "ack_prop5")
      (("" (lemma "ack_prop7")
        (("" (copy -1)
          (("" (lemma "ack_prop6")
            (("" (inst -2 "x0" "x0 + x_0" "ack(x_0, y0)")
              (("" (inst -3 "x_0" "x0 + x_0 + 1" "y0")
                (("" (assert)
                  ((""
                    (inst -4 "x0 + x_0" "ack(x_0, y0)"
                     "ack(1 + x0 + x_0, y0)")
                    (("" (assert)
                      (("" (inst -1 "x0 + x_0 + 1" "y0")
                        (("" (assert)
                          (("" (expand "ack" -1 1)
                            (("" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ack_prop7 formula-decl nil pr_ack nil)
    (ack_prop6 formula-decl nil pr_ack nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (ack def-decl "nat" pr_ack nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (ack_prop5 formula-decl nil pr_ack nil))
   shostak))
 (maj_by_ack_implies_maj_const_existance 0
  (maj_by_ack_implies_maj_const_existance-1 nil 3757496647
   ("" (skolem!)
    (("" (skolem!)
      (("" (flatten)
        (("" (expand "maj_by_ack?") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((maj_by_ack? const-decl "bool" pr_ack nil)) shostak))
 (pr_zero_maj_by_ack 0
  (pr_zero_maj_by_ack-1 nil 3757442314
   ("" (skolem 1 ("k0" "f0"))
    (("" (flatten)
      (("" (expand "maj_by_ack?")
        (("" (expand "zero")
          (("" (inst 1 "0")
            (("" (skolem 1 "n0")
              (("" (replace -1)
                (("" (assert)
                  (("" (expand "ack") (("" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((maj_by_ack? const-decl "bool" pr_ack nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (ack def-decl "nat" pr_ack nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (zero const-decl "nat" pr_ack nil))
   shostak))
 (pr_succ_maj_by_ack_TCC1 0
  (pr_succ_maj_by_ack_TCC1-1 nil 3757442870 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (pr_succ_maj_by_ack 0
  (pr_succ_maj_by_ack-1 nil 3757442871
   ("" (skolem 1 ("k0" "f0"))
    (("" (flatten)
      (("" (expand "maj_by_ack?")
        (("" (inst 1 "1")
          (("" (skolem 1 "n0")
            (("" (expand "pr_succ")
              (("" (replace -2)
                (("" (assert)
                  (("" (expand "max_nats")
                    (("" (assert)
                      (("" (lemma "max_array[1, nat, <=].imax_1")
                        (("" (lemma "max_array[1, nat, <=].imax_lem")
                          (("" (inst - "n0")
                            (("1" (inst - "n0")
                              (("1"
                                (replace -1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (replace -2)
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (lemma "ack_prop8")
                                        (("1"
                                          (inst
                                           -1
                                           "max[k0, nat, restrict[[real, real], [nat, nat], boolean](<=)](n0)")
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (typepred
                                                   "max[k0, nat, restrict[[real, real], [nat, nat], boolean](<=)](n0)")
                                                  (("1"
                                                    (skolem -2 "j0")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (replace -2)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((maj_by_ack? const-decl "bool" pr_ack nil)
    (max_nats const-decl "nat" pr_ack nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (total_order_restrict application-judgement "(total_order?[S])"
     restrict_order_props nil)
    (dichotomous_restrict application-judgement "(dichotomous?[S])"
     restrict_order_props nil)
    (partial_order_restrict application-judgement "(partial_order?[S])"
     restrict_order_props nil)
    (preorder_restrict application-judgement "(preorder?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (reflexive_restrict application-judgement "(reflexive?[S])"
     restrict_order_props nil)
    (imax_1 formula-decl nil max_array "structures/")
    (restrict const-decl "R" restrict nil)
    (<= const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (nat_args nonempty-type-eq-decl nil pr_ack nil)
    (Index type-eq-decl nil arrays "structures/")
    (below type-eq-decl nil naturalnumbers nil)
    (ack_prop8 formula-decl nil pr_ack nil)
    (> const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (max const-decl
         "{t: T | (FORALL ii: A(ii) <= t) AND (EXISTS jj: A(jj) = t)}"
         max_array "structures/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (imax_lem formula-decl nil max_array "structures/")
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pr_succ const-decl "nat" pr_ack nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (pr_pi_maj_by_ack_TCC1 0
  (pr_pi_maj_by_ack_TCC1-1 nil 3757443195 ("" (subtype-tcc) nil nil)
   nil nil))
 (pr_pi_maj_by_ack 0
  (pr_pi_maj_by_ack-1 nil 3757443209
   ("" (skolem 1 ("k0" "f0"))
    (("" (flatten)
      (("" (skolem -1 "i0")
        (("" (expand "maj_by_ack?")
          (("" (inst 1 "0")
            (("" (skolem 1 "n0")
              (("" (replace -1)
                (("" (expand "pi")
                  (("" (expand "max_nats")
                    ((""
                      (typepred
                       "max[k0, nat, restrict[[real, real], [nat, nat], boolean](<=)](n0)")
                      (("" (inst -1 "i0 - 1")
                        (("" (assert)
                          (("" (expand "ack")
                            (("" (assert)
                              ((""
                                (expand "restrict")
                                (("" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (max_nats const-decl "nat" pr_ack nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (subrange type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (ack def-decl "nat" pr_ack nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (> const-decl "bool" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (total_order_restrict application-judgement "(total_order?[S])"
     restrict_order_props nil)
    (dichotomous_restrict application-judgement "(dichotomous?[S])"
     restrict_order_props nil)
    (partial_order_restrict application-judgement "(partial_order?[S])"
     restrict_order_props nil)
    (preorder_restrict application-judgement "(preorder?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (reflexive_restrict application-judgement "(reflexive?[S])"
     restrict_order_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (restrict const-decl "R" restrict nil)
    (<= const-decl "bool" reals nil)
    (Index type-eq-decl nil arrays "structures/")
    (nat_args nonempty-type-eq-decl nil pr_ack nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (max const-decl
         "{t: T | (FORALL ii: A(ii) <= t) AND (EXISTS jj: A(jj) = t)}"
         max_array "structures/")
    (pi const-decl "nat" pr_ack nil)
    (maj_by_ack? const-decl "bool" pr_ack nil))
   shostak))
 (maj_by_ack_TCC1 0
  (maj_by_ack_TCC1-1 nil 3757491746
   ("" (lemma "pr_zero_maj_by_ack")
    (("" (assert)
      (("" (skolem!) (("" (inst -1 "k!1" "zero(k!1)") nil nil)) nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Index type-eq-decl nil arrays "structures/")
    (nat_args nonempty-type-eq-decl nil pr_ack nil)
    (rfunc nonempty-type-eq-decl nil pr_ack nil)
    (zero const-decl "nat" pr_ack nil)
    (pr_zero_maj_by_ack formula-decl nil pr_ack nil))
   nil))
 (maj_constant_min_TCC1 0
  (maj_constant_min_TCC1-1 nil 3757501310
   ("" (skolem!)
    (("" (assert)
      (("" (expand "nonempty?")
        (("" (lemma "maj_by_ack_implies_maj_const_existance")
          (("" (inst -1 "k!1" "f!1")
            (("" (assert)
              (("" (skolem!)
                (("" (expand "empty?")
                  (("" (expand "member")
                    (("" (inst -2 "c!1")
                      (("" (assert)
                        (("" (expand "maj_by_ack_constant?")
                          (("" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((maj_by_ack_implies_maj_const_existance formula-decl nil pr_ack
     nil)
    (empty? const-decl "bool" sets nil)
    (maj_by_ack_constant? const-decl "bool" pr_ack nil)
    (member const-decl "bool" sets nil)
    (maj_by_ack nonempty-type-eq-decl nil pr_ack nil)
    (maj_by_ack? const-decl "bool" pr_ack nil)
    (rfunc nonempty-type-eq-decl nil pr_ack nil)
    (nat_args nonempty-type-eq-decl nil pr_ack nil)
    (Index type-eq-decl nil arrays "structures/")
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nonempty? const-decl "bool" sets nil))
   nil))
 (maj_constant_ineq 0
  (maj_constant_ineq-1 nil 3757506782
   ("" (skolem 1 ("k0" "f0" "c0"))
    (("" (flatten)
      (("" (expand "maj_by_ack_constant?") (("" (propax) nil nil))
        nil))
      nil))
    nil)
   ((maj_by_ack_constant? const-decl "bool" pr_ack nil)) shostak))
 (universal_maj_constant 0
  (universal_maj_constant-1 nil 3757505762
   ("" (skolem 1 "r0")
    (("" (skolem 1 "k0")
      (("" (skolem 1 "h0")
        (("" (flatten)
          (("" (name "c_array" "maj_constants_array(r0, k0)(h0)")
            (("" (name "c_max" "max[r0, nat, <=](c_array)")
              (("" (inst 1 "c_max")
                (("" (skolem 1 "i0")
                  (("" (inst -3 "i0")
                    (("" (assert)
                      (("" (expand "maj_by_ack_constant?")
                        (("" (expand "maj_constants_array")
                          (("" (skolem 1 "n0")
                            (("" (name "c_i0" "c_array(i0)")
                              ((""
                                (lemma "maj_constant_ineq")
                                ((""
                                  (inst -1 "k0" "h0(i0)" "c_i0")
                                  ((""
                                    (expand "c_array" -2)
                                    ((""
                                      (expand "maj_constants_array")
                                      ((""
                                        (expand "maj_constant_min")
                                        ((""
                                          (assert)
                                          ((""
                                            (inst -1 "n0")
                                            ((""
                                              (lemma "ack_prop7")
                                              ((""
                                                (inst
                                                 -1
                                                 "c_i0"
                                                 "c_max"
                                                 "max_nats(k0)(n0)")
                                                ((""
                                                  (assert)
                                                  ((""
                                                    (typepred
                                                     "max[r0, nat, restrict[[real, real], [nat, nat], boolean](<=)](c_array)")
                                                    ((""
                                                      (assert)
                                                      ((""
                                                        (inst -1 "i0")
                                                        ((""
                                                          (expand
                                                           "restrict")
                                                          ((""
                                                            (assert)
                                                            ((""
                                                              (expand
                                                               "c_array"
                                                               -1)
                                                              ((""
                                                                (expand
                                                                 "maj_constants_array"
                                                                 -1)
                                                                ((""
                                                                  (expand
                                                                   "maj_constant_min"
                                                                   -1)
                                                                  ((""
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((maj_constants_array const-decl "nat_args(r)" pr_ack nil)
    (maj_by_ack nonempty-type-eq-decl nil pr_ack nil)
    (maj_by_ack? const-decl "bool" pr_ack nil)
    (rfunc nonempty-type-eq-decl nil pr_ack nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat_args nonempty-type-eq-decl nil pr_ack nil)
    (Index type-eq-decl nil arrays "structures/")
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (maj_by_ack_constant? const-decl "bool" pr_ack nil)
    (maj_constant_ineq formula-decl nil pr_ack nil)
    (maj_constant_min const-decl "nat" pr_ack nil)
    (max_nats const-decl "nat" pr_ack nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ack_prop7 formula-decl nil pr_ack nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (max const-decl
         "{t: T | (FORALL ii: A(ii) <= t) AND (EXISTS jj: A(jj) = t)}"
         max_array "structures/")
    (restrict const-decl "R" restrict nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (reflexive_restrict application-judgement "(reflexive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (preorder_restrict application-judgement "(preorder?[S])"
     restrict_order_props nil)
    (partial_order_restrict application-judgement "(partial_order?[S])"
     restrict_order_props nil)
    (dichotomous_restrict application-judgement "(dichotomous?[S])"
     restrict_order_props nil)
    (total_order_restrict application-judgement "(total_order?[S])"
     restrict_order_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (pr_comp_maj_by_ack 0
  (pr_comp_maj_by_ack-1 nil 3757443506
   ("" (skolem 1 ("k0" "f0"))
    (("" (flatten)
      (("" (skolem -1 "r0")
        (("" (skolem -1 "g0")
          (("" (skolem -1 "h0")
            (("" (flatten)
              (("" (expand "maj_by_ack?")
                (("" (expand "compose")
                  (("" (skolem -1 "c_g")
                    (("" (lemma "universal_maj_constant")
                      (("" (inst -1 "r0" "k0" "h0")
                        (("1" (split)
                          (("1" (skolem -1 "c_max")
                            (("1" (inst 1 "c_g + c_max + 2")
                              (("1"
                                (skolem 1 "n0")
                                (("1"
                                  (name
                                   "m0"
                                   "LAMBDA (i: Index[r0]): h0(i)(n0)")
                                  (("1"
                                    (inst -3 "m0")
                                    (("1"
                                      (name
                                       "m0_J"
                                       "imax[r0, nat, <=](m0)")
                                      (("1"
                                        (lemma "imax_lem[r0, nat, <=]")
                                        (("1"
                                          (inst -1 "m0")
                                          (("1"
                                            (replace -2)
                                            (("1"
                                              (hide -2)
                                              (("1"
                                                (expand "max_nats" -4)
                                                (("1"
                                                  (replace -1 :dir rl)
                                                  (("1"
                                                    (inst -3 "m0_J")
                                                    (("1"
                                                      (expand
                                                       "maj_by_ack_constant?")
                                                      (("1"
                                                        (expand
                                                         "m0"
                                                         -4
                                                         2)
                                                        (("1"
                                                          (inst
                                                           -3
                                                           "n0")
                                                          (("1"
                                                            (lemma
                                                             "ack_prop5")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "c_g"
                                                               "h0(m0_J)(n0)"
                                                               "ack(c_max, max_nats(k0)(n0))")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (hide
                                                                   -6)
                                                                  (("1"
                                                                    (lemma
                                                                     "ack_prop10_constant")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "c_g"
                                                                       "c_max"
                                                                       "max_nats(k0)(n0)")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (replace
                                                                           -7)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (skolem 1 "i0")
                              (("2"
                                (inst -2 "i0")
                                (("2"
                                  (skolem -2 "c0")
                                  (("2"
                                    (inst 2 "c0")
                                    (("2"
                                      (expand "maj_by_ack?")
                                      (("2" (inst 1 "c0") nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skolem 1 "i0")
                          (("2" (inst -2 "i0")
                            (("2" (skolem -2 "c0")
                              (("2"
                                (inst 2 "c0")
                                (("2"
                                  (expand "maj_by_ack?")
                                  (("2" (inst 1 "c0") nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((maj_by_ack? const-decl "bool" pr_ack nil)
    (rfunc nonempty-type-eq-decl nil pr_ack nil)
    (nat_args nonempty-type-eq-decl nil pr_ack nil)
    (Index type-eq-decl nil arrays "structures/")
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (maj_by_ack nonempty-type-eq-decl nil pr_ack nil)
    (imax_lem formula-decl nil max_array "structures/")
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (max_nats const-decl "nat" pr_ack nil)
    (ack_prop5 formula-decl nil pr_ack nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ack_prop10_constant formula-decl nil pr_ack nil)
    (ack def-decl "nat" pr_ack nil)
    (maj_by_ack_constant? const-decl "bool" pr_ack nil)
    (imax const-decl "{i: below(N) | (FORALL ii: A(ii) <= A(i))}"
     max_array "structures/")
    (restrict const-decl "R" restrict nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (reflexive_restrict application-judgement "(reflexive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (preorder_restrict application-judgement "(preorder?[S])"
     restrict_order_props nil)
    (partial_order_restrict application-judgement "(partial_order?[S])"
     restrict_order_props nil)
    (dichotomous_restrict application-judgement "(dichotomous?[S])"
     restrict_order_props nil)
    (total_order_restrict application-judgement "(total_order?[S])"
     restrict_order_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (universal_maj_constant formula-decl nil pr_ack nil)
    (compose const-decl "rfunc(k)" pr_ack nil))
   shostak))
 (remove_appended_el_eq_TCC1 0
  (remove_appended_el_eq_TCC1-1 nil 3757515065
   ("" (subtype-tcc) nil nil) nil nil))
 (remove_appended_el_eq 0
  (remove_appended_el_eq-1 nil 3757515066
   ("" (skolem 1 "k0")
    (("" (skolem 1 "n0")
      (("" (skolem 1 "x0")
        (("" (expand "copy_init") (("" (decompose-equality) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((Index type-eq-decl nil arrays "structures/")
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nat_args nonempty-type-eq-decl nil pr_ack nil)
    (copy_init const-decl "nat_args(l)" pr_ack nil))
   shostak))
 (split_at_last_eq_TCC1 0
  (split_at_last_eq_TCC1-1 nil 3757580144 ("" (subtype-tcc) nil nil)
   nil nil))
 (split_at_last_eq_TCC2 0
  (split_at_last_eq_TCC2-1 nil 3757580144 ("" (subtype-tcc) nil nil)
   nil nil))
 (split_at_last_eq 0
  (split_at_last_eq-1 nil 3757580170
   ("" (skolem 1 ("k0" "n0"))
    (("" (expand "copy_init")
      (("" (decompose-equality)
        (("" (case "x!1 < k0")
          (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((copy_init const-decl "nat_args(l)" pr_ack nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Index type-eq-decl nil arrays "structures/")
    (nat_args nonempty-type-eq-decl nil pr_ack nil))
   shostak))
 (max_ab_le_sum 0
  (max_ab_le_sum-1 nil 3757516309
   ("" (skolem 1 ("a0" "b0"))
    (("" (expand "max")
      (("" (case "a0 < b0")
        (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil))
   shostak))
 (max_append_smaller 0
  (max_append_smaller-1 nil 3757522123
   ("" (skolem 1 ("k0" "n0"))
    (("" (skolem 1 "a0")
      (("" (flatten)
        (("" (name "max_n" "max_nats(k0)(n0)")
          (("" (name "max_na" "max_nats(k0 + 1)(n0 WITH [k0 |-> a0])")
            (("" (expand "max_nats" 1 1)
              (("" (case "k0 = 0")
                (("1" (assert)
                  (("1" (expand "max_nats" -4) (("1" (assert) nil nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (expand "max_nats" -2)
                    (("2" (replace -2)
                      (("2" (lemma "max_it_is[k0 + 1, nat, <=]")
                        (("2" (name "m0" "n0 WITH [k0 |-> a0]")
                          (("2" (replace -1)
                            (("2" (inst -2 "m0" "max_n")
                              (("2"
                                (replace -3)
                                (("2"
                                  (expand "max_nats" -5)
                                  (("2"
                                    (replace -4)
                                    (("2"
                                      (split)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "max_nats" -3)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skolem 1 "i0")
                                        (("2"
                                          (case "i0 < k0")
                                          (("1"
                                            (typepred
                                             "max[k0, nat, restrict[[real, real], [nat, nat], boolean](<=)](n0)")
                                            (("1"
                                              (replace -6)
                                              (("1"
                                                (inst -1 "i0")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "restrict")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (assert)
                                        (("3"
                                          (expand "in?")
                                          (("3"
                                            (typepred
                                             "max[k0, nat, restrict[[real, real], [nat, nat], boolean](<=)](n0)")
                                            (("3"
                                              (replace -5)
                                              (("3"
                                                (skolem -2 "i_max")
                                                (("3"
                                                  (inst 1 "i_max")
                                                  (("3"
                                                    (hide -1)
                                                    (("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (total_order_restrict application-judgement "(total_order?[S])"
     restrict_order_props nil)
    (dichotomous_restrict application-judgement "(dichotomous?[S])"
     restrict_order_props nil)
    (partial_order_restrict application-judgement "(partial_order?[S])"
     restrict_order_props nil)
    (preorder_restrict application-judgement "(preorder?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (reflexive_restrict application-judgement "(reflexive?[S])"
     restrict_order_props nil)
    (max_it_is formula-decl nil max_array "structures/")
    (restrict const-decl "R" restrict nil)
    (<= const-decl "bool" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (in? const-decl "bool" below_arrays "structures/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (max const-decl
         "{t: T | (FORALL ii: A(ii) <= t) AND (EXISTS jj: A(jj) = t)}"
         max_array "structures/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (> const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Index type-eq-decl nil arrays "structures/")
    (nat_args nonempty-type-eq-decl nil pr_ack nil)
    (max_nats const-decl "nat" pr_ack nil))
   shostak))
 (max_expanded_n_eq 0
  (max_expanded_n_eq-2 "snd_try" 3757524549
   ("" (skolem 1 ("k0" "n0"))
    (("" (skolem 1 "a0")
      (("" (case "k0 = 0")
        (("1" (expand "max_nats" 1 2)
          (("1" (assert)
            (("1" (expand "max")
              (("1" (assert)
                (("1" (typepred "a0")
                  (("1" (assert)
                    (("1" (expand "max_nats")
                      (("1"
                        (name "max_m"
                              "max[1 + k0, nat, restrict[[real, real], [nat, nat], boolean](<=)](n0 WITH [k0 |-> a0])")
                        (("1" (name "m0" "n0 WITH [k0 |-> a0]")
                          (("1" (replace -1)
                            (("1" (replace -2)
                              (("1"
                                (typepred
                                 "max[1 + k0, nat, restrict[[real, real], [nat, nat], boolean](<=)](m0)")
                                (("1"
                                  (replace -4)
                                  (("1"
                                    (hide -1 -2)
                                    (("1"
                                      (lemma "imax_1[1, nat, <=]")
                                      (("1"
                                        (inst -1 "n0 WITH [k0 |-> a0]")
                                        (("1"
                                          (lemma
                                           "imax_lem[1, nat, <=]")
                                          (("1"
                                            (inst
                                             -1
                                             "n0 WITH [k0 |-> a0]")
                                            (("1"
                                              (split)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (case "a0 = 0")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replace
                                                       -4
                                                       :dir
                                                       rl)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -5
                                                               :dir
                                                               rl)
                                                              (("1"
                                                                (replace
                                                                 -7)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (typepred
                                                                     "max[1 + k0, nat, <=](n0 WITH [(0) |-> 0])")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (typepred
                                                       "max[1 + k0, nat, <=](n0 WITH [(0) |-> 0])")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (replace
                                                           -5
                                                           :dir
                                                           rl)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (replace
                                                               -6
                                                               :dir
                                                               rl)
                                                              (("2"
                                                                (hide
                                                                 -1
                                                                 -2)
                                                                (("2"
                                                                  (lemma
                                                                   "max_it_is[k0 + 1, nat, <=]")
                                                                  (("2"
                                                                    (replace
                                                                     -5)
                                                                    (("2"
                                                                      (replace
                                                                       -4)
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "m0"
                                                                         "a0")
                                                                        (("2"
                                                                          (typepred
                                                                           "max[k0 + 1, nat, <=](m0)")
                                                                          (("2"
                                                                            (hide
                                                                             -2)
                                                                            (("2"
                                                                              (hide
                                                                               -1)
                                                                              (("2"
                                                                                (split)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (typepred
                                                                                   "max[k0 + 1, nat, <=](m0)")
                                                                                  (("2"
                                                                                    (hide
                                                                                     -2)
                                                                                    (("2"
                                                                                      (skolem
                                                                                       1
                                                                                       "i0")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "i0")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (expand
                                                                                   "in?")
                                                                                  (("3"
                                                                                    (assert)
                                                                                    (("3"
                                                                                      (inst
                                                                                       1
                                                                                       "k0")
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (name "m0" "n0 WITH [k0 |-> a0]")
          (("2" (replace -1)
            (("2" (expand "max_nats")
              (("2" (assert)
                (("2"
                  (name "max_m"
                        "max[1 + k0, nat, restrict[[real, real], [nat, nat], boolean](<=)](m0)")
                  (("2" (replace -1)
                    (("2"
                      (name "max_n"
                            "max[k0, nat, restrict[[real, real], [nat, nat], boolean](<=)](n0)")
                      (("2" (replace -1)
                        (("2" (case "a0 >= max_n")
                          (("1" (expand "max")
                            (("1" (lemma "max_it_is[k0 + 1, nat, <=]")
                              (("1"
                                (inst -1 "m0" "a0")
                                (("1"
                                  (split)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (case "a0 > max_n")
                                      (("1" (assert) nil nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skolem 1 "i0")
                                    (("2"
                                      (case "i0 < k0")
                                      (("1"
                                        (typepred "max_n")
                                        (("1"
                                          (inst -1 "i0")
                                          (("1"
                                            (expand "restrict")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (expand "in?")
                                    (("3"
                                      (inst 1 "k0")
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma "max_append_smaller")
                            (("2" (inst -1 "k0" "n0" "a0")
                              (("2"
                                (assert)
                                (("2"
                                  (split)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "max_nats")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "max")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (expand "max_nats")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (total_order_restrict application-judgement "(total_order?[S])"
     restrict_order_props nil)
    (dichotomous_restrict application-judgement "(dichotomous?[S])"
     restrict_order_props nil)
    (partial_order_restrict application-judgement "(partial_order?[S])"
     restrict_order_props nil)
    (preorder_restrict application-judgement "(preorder?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (reflexive_restrict application-judgement "(reflexive?[S])"
     restrict_order_props nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (restrict const-decl "R" restrict nil)
    (<= const-decl "bool" reals nil)
    (max const-decl
         "{t: T | (FORALL ii: A(ii) <= t) AND (EXISTS jj: A(jj) = t)}"
         max_array "structures/")
    (Index type-eq-decl nil arrays "structures/")
    (nat_args nonempty-type-eq-decl nil pr_ack nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (in? const-decl "bool" below_arrays "structures/")
    (max_it_is formula-decl nil max_array "structures/")
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (imax_lem formula-decl nil max_array "structures/")
    (imax_1 formula-decl nil max_array "structures/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (max_nats const-decl "nat" pr_ack nil)
    (max_append_smaller formula-decl nil pr_ack nil)
    (> const-decl "bool" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak)
  (max_expanded_n_eq-1 nil 3757518788
   ("" (skolem 1 ("k0" "n0"))
    (("" (skolem 1 ("a0" "b0"))
      (("" (expand "max_nats")
        (("" (case "k0 - 1 = 0")
          (("1" (assert)
            (("1" (case "a0 = 0")
              (("1" (assert)
                (("1" (expand "max")
                  (("1" (assert)
                    (("1"
                      (typepred
                       "max[1 + k0, nat, restrict[[real, real], [nat, nat], boolean](<=)](n0 WITH [(k0 - 1) |-> a0, (k0) |-> b0])")
                      (("1" (assert)
                        (("1" (skolem -2 "i_max")
                          (("1" (postpone) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (postpone) nil nil))
              nil))
            nil)
           ("2" (postpone) nil nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (max_expanded2_n_eq_TCC1 0
  (max_expanded2_n_eq_TCC1-1 nil 3757578091 ("" (subtype-tcc) nil nil)
   nil nil))
 (max_expanded2_n_eq_TCC2 0
  (max_expanded2_n_eq_TCC2-1 nil 3757578091 ("" (subtype-tcc) nil nil)
   nil nil))
 (max_expanded2_n_eq 0
  (max_expanded2_n_eq-1 nil 3757578092
   ("" (lemma "max_expanded_n_eq")
    (("" (copy -1)
      (("" (skolem 1 ("k0" "n0"))
        (("" (skolem 1 ("a0" "b0"))
          (("" (inst -1 "k0" "n0" "a0")
            (("" (replace -1 :dir rl)
              (("" (inst -2 "k0 + 1" "n0 WITH [k0 |-> a0]" "b0")
                (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_args nonempty-type-eq-decl nil pr_ack nil)
    (Index type-eq-decl nil arrays "structures/")
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (max_expanded_n_eq formula-decl nil pr_ack nil))
   shostak))
 (pr_rec_maj_by_ack_inductive_part_mixed_TCC1 0
  (pr_rec_maj_by_ack_inductive_part_mixed_TCC1-1 nil 3757513608
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (pr_rec_maj_by_ack_inductive_part_mixed_TCC2 0
  (pr_rec_maj_by_ack_inductive_part_mixed_TCC2-1 nil 3757513608
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (maj_by_ack? const-decl "bool" pr_ack nil)
    (max_nats const-decl "nat" pr_ack nil))
   nil))
 (pr_rec_maj_by_ack_inductive_part_mixed 0
  (pr_rec_maj_by_ack_inductive_part_mixed-1 nil 3757513868
   ("" (skolem 1 ("k0" "f0"))
    (("" (flatten)
      (("" (skolem -2 "g0")
        (("" (skolem -2 "h0")
          (("" (flatten)
            (("" (expand "maj_by_ack?")
              (("" (skolem -2 "c_g")
                (("" (skolem -3 "c_h")
                  (("" (name "c_max" "max(c_g, c_h)")
                    (("" (inst 1 "c_max + 1")
                      (("" (skolem 1 "n0")
                        (("" (induct "x")
                          (("1" (replace -5)
                            (("1" (expand "pr" 1)
                              (("1"
                                (case "k0 - 1 = 0")
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst -4 "init_with(0)")
                                    (("1"
                                      (expand "max_nats" -4)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma "ack_prop5")
                                          (("1"
                                            (inst
                                             -1
                                             "c_g"
                                             "0"
                                             "max_nats(k0 - 1)(n0)")
                                            (("1"
                                              (lemma "ack_prop7")
                                              (("1"
                                                (inst
                                                 -1
                                                 "c_g"
                                                 "1 + c_max"
                                                 "max_nats(k0 - 1)(n0)")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (name
                                     "m0"
                                     "copy_init(k0, k0 - 1)(n0 WITH [(k0 - 1) |-> 0])")
                                    (("2"
                                      (replace -1)
                                      (("2"
                                        (inst -4 "m0")
                                        (("2"
                                          (lemma "ack_prop7")
                                          (("2"
                                            (lemma
                                             "remove_appended_el_eq")
                                            (("2"
                                              (inst
                                               -1
                                               "k0 - 1"
                                               "n0"
                                               "0")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (inst
                                                   -2
                                                   "c_g"
                                                   "1 + c_max"
                                                   "max_nats(k0 - 1)(n0)")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skolem 1 "x0")
                            (("2" (flatten)
                              (("2"
                                (replace -6)
                                (("2"
                                  (expand "pr" 1)
                                  (("2"
                                    (hide -4)
                                    (("2"
                                      (hide -5)
                                      (("2"
                                        (name
                                         "f_prev"
                                         "pr(k0 - 1, g0, h0)(n0 WITH [(k0 - 1) |-> x0])")
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (name
                                               "max_n_x"
                                               "max(max_nats(k0 - 1)(n0), x0)")
                                              (("1"
                                                (lemma "max_ab_le_sum")
                                                (("1"
                                                  (name
                                                   "max_n0"
                                                   "max_nats(k0 - 1)(n0)")
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "max_n0"
                                                         "x0")
                                                        (("1"
                                                          (replace -2)
                                                          (("1"
                                                            (lemma
                                                             "ack_prop4")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "c_max"
                                                               "max_n0 + x0")
                                                              (("1"
                                                                (name
                                                                 "m0"
                                                                 "n0 WITH [(k0 - 1) |-> x0, (k0) |-> f_prev]")
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (lemma
                                                                     "max_le")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "max_n_x"
                                                                       "f_prev"
                                                                       "ack(1 + c_max, max_n0 + x0)")
                                                                      (("1"
                                                                        (lemma
                                                                         "ack_prop7")
                                                                        (("1"
                                                                          (inst
                                                                           -10
                                                                           "m0")
                                                                          (("1"
                                                                            (lemma
                                                                             "max_expanded2_n_eq")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "k0 - 1"
                                                                               "n0"
                                                                               "x0"
                                                                               "f_prev")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   -4)
                                                                                  (("1"
                                                                                    (use
                                                                                     "max_n0")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1
                                                                                         :dir
                                                                                         rl)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -2)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -8
                                                                                             :dir
                                                                                             rl)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -8)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -10)
                                                                                                (("1"
                                                                                                  (hide
                                                                                                   -5)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "ack_prop4")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "1 + c_max"
                                                                                                         "max_n0 + x0")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -3
                                                                                                             "c_h"
                                                                                                             "c_max"
                                                                                                             "ack(1 + c_max, max_n0 + x0)")
                                                                                                            (("1"
                                                                                                              (split)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (hide
                                                                                                                   -7)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "ack"
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (lemma
                                                                                                                         "ack_prop5")
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           "c_h"
                                                                                                                           "max(max_n_x, f_prev)"
                                                                                                                           "ack(1 + c_max, max_n0 + x0)")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (lemma
                                                                                                                 "ack_prop5")
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "c_h"
                                                                                                                   "max(max_n_x, f_prev)"
                                                                                                                   "ack(1 + c_max, max_n0 + x0)")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (split)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (case
                                                                                                                           "c_h = c_max")
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "ack"
                                                                                                                             2)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "ack"
                                                                                                                           3)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil)
                                         ("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (assert) nil nil)
                           ("4" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (>= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (max_ab_le_sum formula-decl nil pr_ack nil)
    (ack_prop4 formula-decl nil pr_ack nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (max_le formula-decl nil real_defs nil)
    (max_expanded2_n_eq formula-decl nil pr_ack nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    nil (init_with const-decl "Reals" arrays "structures/")
    (Reals type-eq-decl nil arrays "structures/")
    (ack_prop7 formula-decl nil pr_ack nil)
    (ack_prop5 formula-decl nil pr_ack nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (copy_init const-decl "nat_args(l)" pr_ack nil)
    (remove_appended_el_eq formula-decl nil pr_ack nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (pr def-decl "nat" pr_ack nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (< const-decl "bool" reals nil)
    (Index type-eq-decl nil arrays "structures/")
    (nat_args nonempty-type-eq-decl nil pr_ack nil)
    (rfunc nonempty-type-eq-decl nil pr_ack nil)
    (ack def-decl "nat" pr_ack nil)
    (max_nats const-decl "nat" pr_ack nil) nil
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (maj_by_ack? const-decl "bool" pr_ack nil))
   shostak))
 (pr_rec_maj_by_ack_inductive_part_TCC1 0
  (pr_rec_maj_by_ack_inductive_part_TCC1-1 nil 3757512784
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (maj_by_ack? const-decl "bool" pr_ack nil)
    (max_nats const-decl "nat" pr_ack nil))
   nil))
 (pr_rec_maj_by_ack_inductive_part 0
  (pr_rec_maj_by_ack_inductive_part-1 nil 3757512848
   ("" (skolem 1 ("k0" "f0"))
    (("" (flatten)
      (("" (skolem -2 "g0")
        (("" (skolem -2 "h0")
          (("" (flatten)
            (("" (expand "maj_by_ack?")
              (("" (skolem -2 "c_g")
                (("" (skolem -3 "c_h")
                  (("" (name "c_max" "max(c_g, c_h)")
                    (("" (inst 1 "c_max + 1") (("" (postpone) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (pr_rec_maj_by_ack 0
  (pr_rec_maj_by_ack-1 nil 3757492368
   ("" (skolem 1 ("k0" "f0"))
    (("" (flatten)
      (("" (skolem -2 "g0")
        (("" (skolem -2 "h0")
          (("" (flatten)
            (("" (lemma "pr_rec_maj_by_ack_inductive_part_mixed")
              (("" (inst -1 "k0" "f0")
                (("" (split)
                  (("1" (skolem -1 "c0")
                    (("1" (expand "maj_by_ack?" 1)
                      (("1" (inst 1 "c0 + 4")
                        (("1" (skolem 1 "m0")
                          (("1" (name "n0" "copy_init(k0, k0-1)(m0)")
                            (("1" (inst -2 "n0")
                              (("1"
                                (inst -2 "m0(k0-1)")
                                (("1"
                                  (lemma "max_expanded_n_eq")
                                  (("1"
                                    (name "m0_last" "m0(k0-1)")
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (inst -1 "k0" "n0" "m0_last")
                                          (("1"
                                            (lemma "split_at_last_eq")
                                            (("1"
                                              (hide -6 -7)
                                              (("1"
                                                (inst -1 "k0 - 1" "m0")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (replace -3)
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (replace
                                                         -1
                                                         :dir
                                                         rl)
                                                        (("1"
                                                          (postpone)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (postpone)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (postpone) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (postpone) nil nil))
                                nil))
                              nil)
                             ("2" (postpone) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (propax) nil nil) ("3" (postpone) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (pr_maj_lemma_weak_ind_antecedent_TCC1 0
  (pr_maj_lemma_weak_ind_antecedent_TCC1-1 nil 3757578091
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (pr_maj_lemma_weak_ind_antecedent_TCC2 0
  (pr_maj_lemma_weak_ind_antecedent_TCC2-1 nil 3757578091
   ("" (subtype-tcc) nil nil) nil nil))
 (pr_maj_lemma_weak_ind_antecedent 0
  (pr_maj_lemma_weak_ind_antecedent-1 nil 3757488068
   ("" (skolem 1 ("k0" "f0"))
    (("" (flatten)
      (("" (split)
        (("1" (lemma "pr_zero_maj_by_ack")
          (("1" (inst -1 "k0" "f0") (("1" (assert) nil nil)) nil)) nil)
         ("2" (lemma "pr_succ_maj_by_ack")
          (("2" (inst -1 "k0" "f0") (("2" (assert) nil nil)) nil)) nil)
         ("3" (lemma "pr_pi_maj_by_ack")
          (("3" (inst -1 "k0" "f0") (("3" (assert) nil nil)) nil)) nil)
         ("4" (lemma "pr_comp_maj_by_ack")
          (("4" (inst -1 "k0" "f0") (("4" (assert) nil nil)) nil)) nil)
         ("5" (lemma "pr_rec_maj_by_ack")
          (("5" (inst -1 "k0" "f0") (("5" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Index type-eq-decl nil arrays "structures/")
    (nat_args nonempty-type-eq-decl nil pr_ack nil)
    (rfunc nonempty-type-eq-decl nil pr_ack nil)
    (pr_zero_maj_by_ack formula-decl nil pr_ack nil)
    (pr_succ_maj_by_ack formula-decl nil pr_ack nil)
    (pr_pi_maj_by_ack formula-decl nil pr_ack nil)
    (pr_comp_maj_by_ack formula-decl nil pr_ack nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pr_rec_maj_by_ack formula-decl nil pr_ack nil))
   shostak))
 (pr_maj_by_ack 0
  (pr_maj_by_ack-1 nil 3757413016
   ("" (lemma "prim_rec?_weak_induction")
    (("" (lemma "pr_maj_lemma_weak_ind_antecedent")
      (("" (skolem 1 "k0")
        (("" (skolem 1 "f0")
          (("" (inst -2 "maj_by_ack?")
            (("" (assert)
              (("" (flatten)
                (("" (split)
                  (("1" (inst -1 "k0" "f0") (("1" (assert) nil nil))
                    nil)
                   ("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((prim_rec?_weak_induction formula-decl nil pr_ack nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Index type-eq-decl nil arrays "structures/")
    (nat_args nonempty-type-eq-decl nil pr_ack nil)
    (rfunc nonempty-type-eq-decl nil pr_ack nil)
    (maj_by_ack? const-decl "bool" pr_ack nil)
    (pr_maj_lemma_weak_ind_antecedent formula-decl nil pr_ack nil))
   shostak))
 (pr_maj_by_ack_arr 0
  (pr_maj_by_ack_arr-1 nil 3757413038
   ("" (lemma "pr_maj_by_ack")
    (("" (skolem 1 "k0")
      (("" (skolem 1 "f0")
        (("" (flatten)
          (("" (inst -1 "k0" "f0")
            (("" (assert)
              (("" (lemma "pr_maj_by_ack")
                (("" (inst -1 "k0" "f0")
                  (("" (expand "maj_by_ack?")
                    (("" (expand "maj_by_ack_arr?")
                      (("" (lemma "pr_maj_by_ack")
                        (("" (inst -1 "k0" "f0")
                          (("" (assert)
                            (("" (expand "ack_arr")
                              (("" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pr_maj_by_ack formula-decl nil pr_ack nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Index type-eq-decl nil arrays "structures/")
    (nat_args nonempty-type-eq-decl nil pr_ack nil)
    (rfunc nonempty-type-eq-decl nil pr_ack nil)
    (maj_by_ack? const-decl "bool" pr_ack nil)
    (ack_arr const-decl "nat" pr_ack nil)
    (maj_by_ack_arr? const-decl "bool" pr_ack nil))
   shostak))
 (ack_pr_implies_diag_pr 0
  (ack_pr_implies_diag_pr-1 nil 3757412875
   ("" (flatten)
    (("" (expand "prim_rec?" 1)
      (("" (flatten)
        (("" (hide 1 2 3 5)
          ((""
            (inst 1 "2" "ack_arr"
             "init_rfuncs(2, 1) WITH [0 := pi(1, 1), 1 := pi(1, 1)]")
            (("" (split)
              (("1" (propax) nil nil)
               ("2" (skolem 1 "i0")
                (("2" (case "i0 = 0")
                  (("1" (assert)
                    (("1" (expand "prim_rec?" 1)
                      (("1" (flatten)
                        (("1" (assert)
                          (("1" (hide 1 2 4 5)
                            (("1" (inst 1 "1") nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (case "i0 = 1")
                    (("1" (assert)
                      (("1" (expand "prim_rec?" 2)
                        (("1" (flatten)
                          (("1" (hide 1 2 3 5 6)
                            (("1" (inst 1 "1") nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil)
               ("3" (expand "ack_arr_diag")
                (("3" (assert) (("3" (decompose-equality) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Index type-eq-decl nil arrays "structures/")
    (nat_args nonempty-type-eq-decl nil pr_ack nil)
    (rfunc nonempty-type-eq-decl nil pr_ack nil)
    (ack_arr const-decl "nat" pr_ack nil)
    (ArrayOf type-eq-decl nil arrays "structures/")
    (init_rfuncs const-decl "ArrayOf[r][rfunc(k)]" pr_ack nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (subrange type-eq-decl nil integers nil)
    (pi const-decl "nat" pr_ack nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ack_arr_diag const-decl "nat" pr_ack nil)
    (compose const-decl "rfunc(k)" pr_ack nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (prim_rec? inductive-decl "bool" pr_ack nil))
   shostak))
 (contradiction_arg_lemma 0
  (contradiction_arg_lemma-1 nil 3757419922
   ("" (skolem 1 "c0")
    (("" (decompose-equality)
      (("" (expand "init_rfuncs")
        (("" (expand "pi")
          (("" (assert)
            (("" (case "x!1 = 0")
              (("1" (assert) nil nil)
               ("2" (case "x!1 = 1")
                (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Index type-eq-decl nil arrays "structures/")
    (pi const-decl "nat" pr_ack nil)
    (subrange type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (init_rfuncs const-decl "ArrayOf[r][rfunc(k)]" pr_ack nil)
    (ArrayOf type-eq-decl nil arrays "structures/")
    (rfunc nonempty-type-eq-decl nil pr_ack nil)
    (nat_args nonempty-type-eq-decl nil pr_ack nil))
   shostak))
 (ack_prim_rec_diag_contradiction 0
  (ack_prim_rec_diag_contradiction-1 nil 3757410138
   ("" (lemma "pr_maj_by_ack_arr")
    (("" (flatten)
      (("" (inst -1 "1" "ack_arr_diag")
        (("" (lemma "ack_pr_implies_diag_pr")
          (("" (assert)
            (("" (expand "ack_arr_diag" 1 2)
              (("" (expand "compose")
                (("" (assert)
                  (("" (lemma "max_array[1, nat, <=].imax_1")
                    (("" (lemma "max_array[1, nat, <=].imax_lem")
                      (("" (expand "init_nats")
                        (("" (assert)
                          (("" (lemma "contradiction_arg_lemma")
                            (("" (lemma "pr_maj_by_ack_arr")
                              ((""
                                (inst -1 "1" "ack_arr_diag")
                                ((""
                                  (lemma "ack_pr_implies_diag_pr")
                                  ((""
                                    (expand "maj_by_ack_arr?")
                                    ((""
                                      (skolem -2 "c0")
                                      ((""
                                        (inst 1 "c0")
                                        ((""
                                          (inst
                                           -2
                                           "(init_nats(1) WITH [(0) := c0])")
                                          ((""
                                            (assert)
                                            ((""
                                              (expand "max_nats")
                                              ((""
                                                (assert)
                                                ((""
                                                  (lemma
                                                   "max_array[1, nat, <=].imax_1")
                                                  ((""
                                                    (lemma
                                                     "max_array[1, nat, <=].imax_lem")
                                                    ((""
                                                      (inst
                                                       -1
                                                       "(init_nats(1) WITH [(0) := c0])")
                                                      ((""
                                                        (inst
                                                         -2
                                                         "(init_nats(1) WITH [(0) := c0])")
                                                        ((""
                                                          (expand
                                                           "init_nats")
                                                          ((""
                                                            (assert)
                                                            ((""
                                                              (replace
                                                               -2)
                                                              ((""
                                                                (assert)
                                                                ((""
                                                                  (replace
                                                                   -1
                                                                   :dir
                                                                   rl)
                                                                  ((""
                                                                    (lemma
                                                                     "contradiction_arg_lemma")
                                                                    ((""
                                                                      (inst
                                                                       -1
                                                                       "c0")
                                                                      ((""
                                                                        (replace
                                                                         -1
                                                                         :dir
                                                                         rl)
                                                                        ((""
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pr_maj_by_ack_arr formula-decl nil pr_ack nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Index type-eq-decl nil arrays "structures/")
    (nat_args nonempty-type-eq-decl nil pr_ack nil)
    (rfunc nonempty-type-eq-decl nil pr_ack nil)
    (ack_arr_diag const-decl "nat" pr_ack nil)
    (compose const-decl "rfunc(k)" pr_ack nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (total_order_restrict application-judgement "(total_order?[S])"
     restrict_order_props nil)
    (dichotomous_restrict application-judgement "(dichotomous?[S])"
     restrict_order_props nil)
    (partial_order_restrict application-judgement "(partial_order?[S])"
     restrict_order_props nil)
    (preorder_restrict application-judgement "(preorder?[S])"
     restrict_order_props nil)
    (transitive_restrict application-judgement "(transitive?[S])"
     restrict_order_props nil)
    (antisymmetric_restrict application-judgement "(antisymmetric?[S])"
     restrict_order_props nil)
    (reflexive_restrict application-judgement "(reflexive?[S])"
     restrict_order_props nil)
    (imax_1 formula-decl nil max_array "structures/")
    (restrict const-decl "R" restrict nil)
    (<= const-decl "bool" reals nil)
    (init_nats const-decl "nat_args(k)" pr_ack nil)
    (contradiction_arg_lemma formula-decl nil pr_ack nil)
    (maj_by_ack_arr? const-decl "bool" pr_ack nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (max_nats const-decl "nat" pr_ack nil)
    (imax_lem formula-decl nil max_array "structures/")
    (ack_pr_implies_diag_pr formula-decl nil pr_ack nil))
   shostak))
 (ack_not_prim_rec 0
  (ack_not_prim_rec-1 nil 3757410658
   ("" (lemma "ack_prim_rec_diag_contradiction")
    (("" (assert) nil nil)) nil)
   ((ack_prim_rec_diag_contradiction formula-decl nil pr_ack nil))
   shostak)))

