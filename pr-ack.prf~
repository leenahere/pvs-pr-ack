(pr_ack
 (sub_args_TCC1 0
  (sub_args_TCC1-1 nil 3756843421 ("" (subtype-tcc) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (sub_args_TCC2 0
  (sub_args_TCC2-1 nil 3756843421 ("" (subtype-tcc) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (sub_args_TCC3 0
  (sub_args_TCC3-1 nil 3756843421 ("" (subtype-tcc) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (sub_args_TCC4 0
  (sub_args_TCC4-1 nil 3756843421 ("" (subtype-tcc) nil nil) nil nil))
 (expand_args_TCC1 0
  (expand_args_TCC1-1 nil 3756843421 ("" (subtype-tcc) nil nil) nil
   nil))
 (expand_args_TCC2 0
  (expand_args_TCC2-1 nil 3756843421 ("" (subtype-tcc) nil nil) nil
   nil))
 (pi_TCC1 0
  (pi_TCC1-1 nil 3756843421 ("" (subtype-tcc) nil nil) nil nil))
 (pr_build_h_m_TCC1 0
  (pr_build_h_m_TCC1-1 nil 3756843421 ("" (subtype-tcc) nil nil) nil
   nil))
 (pr_build_h_m_TCC2 0
  (pr_build_h_m_TCC2-1 nil 3756843421 ("" (subtype-tcc) nil nil) nil
   nil))
 (pr_build_h_m_TCC3 0
  (pr_build_h_m_TCC3-1 nil 3756843421 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (pr_TCC1 0
  (pr_TCC1-1 nil 3756843421 ("" (subtype-tcc) nil nil) nil nil))
 (pr_TCC2 0
  (pr_TCC2-1 nil 3756843421 ("" (subtype-tcc) nil nil) nil nil))
 (pr_TCC3 0
  (pr_TCC3-1 nil 3756843421 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (pr_TCC4 0
  (pr_TCC4-1 nil 3756843421 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (pr_TCC5 0
  (pr_TCC5-1 nil 3756843421 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (pr_TCC6 0
  (pr_TCC6-1 nil 3756843421 ("" (termination-tcc) nil nil) nil nil))
 (addition_args 0
  (addition_args-1 nil 3756887490
   ("" (skolem!)
    (("" (skolem!)
      (("" (skolem!)
        (("" (expand "add_help_args")
          (("" (assert) (("" (postpone) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   nil shostak))
 (pr_add_is_addition 0
  (pr_add_is_addition-1 nil 3756843440
   ("" (skolem!)
    (("" (induct "m")
      (("1" (expand "pr_add")
        (("1" (expand "add_help_args")
          (("1" (expand "pr_add_arr")
            (("1" (expand "pr")
              (("1" (expand "g_add")
                (("1" (expand "sub_args")
                  (("1" (expand "pi")
                    (("1" (expand "for")
                      (("1" (expand "for_it")
                        (("1" (expand "for_it")
                          (("1" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skolem!)
        (("2" (flatten)
          (("2" (expand "pr_add")
            (("2" (expand "pr_add_arr")
              (("2" (lemma "addition_args")
                (("2" (expand "pr" 1)
                  (("2" (expand "add_help_args" 1 5)
                    (("2" (inst -1 "j!1" "n!1" "1 + j!1")
                      (("2" (replace -1 :dir rl :hide? t)
                        (("2" (replace -1 :hide? t)
                          (("2" (postpone) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)))

