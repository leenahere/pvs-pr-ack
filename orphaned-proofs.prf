("pr-ack" pr_ack pr_add_is_addition 0 (pr_add_is_addition-1 nil 3756843440 ("" (expand "pr_add") (("" (expand "pr") (("" (postpone) nil nil)) nil)) nil) nil shostak))("pr-ack" pr_ack sub_args_TCC5 0 (sub_args_TCC5-1 nil 3756843421 ("" (subtype-tcc) nil nil) nil nil))("pr-ack" pr_ack test 0 (test-1 nil 3756888452 ("" (lemma "addition_args") (("" (postpone) nil nil)) nil) nil shostak))("pr-ack" pr_ack pr_TCC6 0 (pr_TCC6-1 nil 3756843421 ("" (termination-tcc) nil nil) nil nil))("pr-ack" pr_ack pr_TCC5 0 (pr_TCC5-1 nil 3756843421 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil)) nil))("pr-ack" pr_ack pr_build_h_m_TCC3 0 (pr_build_h_m_TCC3-1 nil 3756843421 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posint nonempty-type-eq-decl nil integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil))("pr-ack" pr_ack pr_build_h_m_TCC2 0 (pr_build_h_m_TCC2-1 nil 3756843421 ("" (subtype-tcc) nil nil) nil nil))("pr-ack" pr_ack pr_build_h_m_TCC1 0 (pr_build_h_m_TCC1-1 nil 3756843421 ("" (subtype-tcc) nil nil) nil nil))("pr-ack" pr_ack expand_args_TCC2 0 (expand_args_TCC2-1 nil 3756843421 ("" (subtype-tcc) nil nil) nil nil))("pr-ack" pr_ack expand_args_TCC1 0 (expand_args_TCC1-1 nil 3756843421 ("" (subtype-tcc) nil nil) nil nil))("pr-ack" pr_ack pr_TCC7 0 (pr_TCC7-1 nil 3757008441 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil)) nil))("pr-ack" pr_ack sub_args_TCC4 0 (sub_args_TCC4-1 nil 3756843421 ("" (subtype-tcc) nil nil) nil nil))("pr-ack" pr_ack sub_args_TCC3 0 (sub_args_TCC3-1 nil 3756843421 ("" (subtype-tcc) nil nil) ((posint_plus_nnint_is_posint application-judgement "posint" integers nil)) nil))("pr-ack" pr_ack sub_args_TCC2 0 (sub_args_TCC2-1 nil 3756843421 ("" (subtype-tcc) nil nil) ((posint_plus_nnint_is_posint application-judgement "posint" integers nil)) nil))("pr-ack" pr_ack sub_args_TCC1 0 (sub_args_TCC1-1 nil 3756843421 ("" (subtype-tcc) nil nil) ((posint_plus_nnint_is_posint application-judgement "posint" integers nil)) nil))("pr-ack" pr_ack comp_build_m_TCC1 0 (comp_build_m_TCC1-1 nil 3757143511 ("" (subtype-tcc) nil nil) nil nil))("pr-ack" pr_ack ack_prop2 0 (ack_prop2-1 nil 3757239184 ("" (induct "x") (("1" (skolem!) (("1" (skolem!) (("1" (flatten) (("1" (expand "ack") (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (skolem 1 "m0") (("2" (flatten) (("2" (induct "y") (("1" (skolem 1 "z1") (("1" (flatten) (("1" (assert) nil nil)) nil)) nil) ("2" (skolem 1 "x0") (("2" (flatten) (("2" (skolem 1 "y0") (("2" (flatten) (("2" (expand "ack" 1 1) (("2" (inst -1 "y0") (("2" (case "x0 = y0") (("1" (postpone) nil nil) ("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil shostak))("pr-ack" pr_ack ack_prop1 0 (ack_prop1-1 nil 3757238276 ("" (induct "x") (("1" (skolem!) (("1" (expand "ack") (("1" (assert) nil nil)) nil)) nil) ("2" (skolem!) (("2" (flatten) (("2" (induct "y") (("1" (expand "ack" 1) (("1" (inst - "1") (("1" (assert) nil nil)) nil)) nil) ("2" (skolem!) (("2" (flatten) (("2" (expand "ack" 1) (("2" (inst - "ack(1 + j!1, j!2)") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((nnint_plus_posint_is_posint application-judgement "posint" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nat_induction formula-decl nil naturalnumbers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (ack def-decl "nat" pr_ack nil) (> const-decl "bool" reals nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil)) shostak))("pr-ack" pr_ack all_of?_TCC4 0 (all_of?_TCC4-1 nil 3757237060 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil)) nil))("pr-ack" pr_ack all_of?_TCC3 0 (all_of?_TCC3-1 nil 3757237060 ("" (termination-tcc) nil nil) nil nil))("pr-ack" pr_ack all_of?_TCC2 0 (all_of?_TCC2-1 nil 3757237060 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("pr-ack" pr_ack all_of?_TCC1 0 (all_of?_TCC1-1 nil 3757233482 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("pr-ack" pr_ack prim_rec?_TCC4 0 (prim_rec?_TCC4-1 nil 3757359823 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil)) nil))("pr-ack" pr_ack ack_prop5_helper 0 (ack_prop5_helper-1 nil 3757328021 ("" (induct "x") (("1" (skolem!) (("1" (expand "ack") (("1" (assert) nil nil)) nil)) nil) ("2" (skolem 1 "x0") (("2" (lemma "ack_prop4") (("2" (flatten) (("2" (skolem 1 "y0") (("2" (inst -1 "x0" "ack(x0 + 1, y0)") (("2" (expand "ack" 1 2) (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((ack_prop4 formula-decl nil pr_ack nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nat_induction formula-decl nil naturalnumbers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (ack def-decl "nat" pr_ack nil) (< const-decl "bool" reals nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (nnint_plus_posint_is_posint application-judgement "posint" integers nil)) shostak))("pr-ack" pr_ack ack_TCC6 0 (ack_TCC6-1 nil 3757238275 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< def-decl "bool" ordinals nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (lex2 const-decl "ordinal" lex2 nil)) nil))("pr-ack" pr_ack ack_TCC5 0 (ack_TCC5-1 nil 3757238275 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (< def-decl "bool" ordinals nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (lex2 const-decl "ordinal" lex2 nil)) nil))("pr-ack" pr_ack prim_rec_k_maj_by_ack_arr 0 (prim_rec_k_maj_by_ack_arr-1 nil 3757412711 ("" (lemma "prim_rec_k_maj_by_ack") (("" (skolem 1 "k0") (("" (skolem 1 "f0") (("" (flatten) (("" (inst -1 "k0" "f0") (("" (assert) (("" (skolem -1 "c0") (("" (inst 1 "c0") (("" (skolem 1 "n0") (("" (inst -1 "n0") (("" (expand "ack_arr") (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((ack_arr const-decl "nat" pr_ack nil) (rfunc nonempty-type-eq-decl nil pr_ack nil) (nat_args nonempty-type-eq-decl nil pr_ack nil) (Index type-eq-decl nil arrays "structures/") (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) nil) shostak))("pr-ack" pr_ack pr_maj_by_ack_alt 0 (pr_maj_by_ack_alt-1 nil 3757445767 ("" (lemma "prim_rec?_weak_induction") (("" (inst -1 "maj_by_ack?") (("" (skolem 1 "k0") (("" (skolem 1 "f0") (("" (flatten) (("" (split) (("1" (inst -1 "k0" "f0") (("1" (assert) nil nil)) nil) ("2" (lemma "pr_zero_maj_by_ack") (("2" (skolem!) (("2" (inst -1 "k!1" "f!1") (("2" (flatten) (("2" (assert) (("2" (lemma "pr_succ_maj_by_ack") (("2" (inst -1 "k!1" "f!1") (("2" (assert) (("2" (lemma "pr_pi_maj_by_ack") (("2" (inst -1 "k!1" "f!1") (("2" (assert) (("2" (lemma "pr_comp_maj_by_ack") (("2" (inst -1 "k!1" "f!1") (("2" (assert) (("2" (lemma "pr_rec_maj_by_ack") (("2" (inst -1 "k!1" "f!1") (("2" (assert) (("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil shostak))("pr-ack" pr_ack pr_maj_lemma_weak_ind_antecedent_TCC2 0 (pr_maj_lemma_weak_ind_antecedent_TCC2-1 nil 3757501310 ("" (subtype-tcc) nil nil) nil nil))("pr-ack" pr_ack pr_maj_lemma_weak_ind_antecedent_TCC1 0 (pr_maj_lemma_weak_ind_antecedent_TCC1-1 nil 3757501310 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil))("pr-ack" pr_ack maj_constants_array_TCC1 0 (maj_constants_array_TCC1-1 nil 3757496184 ("" (skolem!) (("" (expand "nonempty?") (("" (expand "maj_by_ack_constant?") (("" (lemma "maj_by_ack_implies_maj_const_existance") (("" (inst -1 "k!1" "h!1(i!1)") (("" (assert) (("" (skolem!) (("" (expand "empty?") (("" (inst -2 "c!1") (("" (assert) (("" (expand "member") (("" (propax) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((nonempty? const-decl "bool" sets nil) (maj_by_ack_implies_maj_const_existance formula-decl nil pr_ack nil) (empty? const-decl "bool" sets nil) (member const-decl "bool" sets nil) (maj_by_ack nonempty-type-eq-decl nil pr_ack nil) (maj_by_ack? const-decl "bool" pr_ack nil) (posnat nonempty-type-eq-decl nil integers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (rfunc nonempty-type-eq-decl nil pr_ack nil) (nat_args nonempty-type-eq-decl nil pr_ack nil) (Index type-eq-decl nil arrays "structures/") (< const-decl "bool" reals nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (maj_by_ack_constant? const-decl "bool" pr_ack nil)) nil))