("pr-ack" pr_ack pr_add_is_addition 0 (pr_add_is_addition-1 nil 3756843440 ("" (expand "pr_add") (("" (expand "pr") (("" (postpone) nil nil)) nil)) nil) nil shostak))("pr-ack" pr_ack sub_args_TCC5 0 (sub_args_TCC5-1 nil 3756843421 ("" (subtype-tcc) nil nil) nil nil))("pr-ack" pr_ack test 0 (test-1 nil 3756888452 ("" (lemma "addition_args") (("" (postpone) nil nil)) nil) nil shostak))("pr-ack" pr_ack pr_TCC6 0 (pr_TCC6-1 nil 3756843421 ("" (termination-tcc) nil nil) nil nil))("pr-ack" pr_ack pr_TCC5 0 (pr_TCC5-1 nil 3756843421 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil)) nil))("pr-ack" pr_ack pr_build_h_m_TCC3 0 (pr_build_h_m_TCC3-1 nil 3756843421 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (> const-decl "bool" reals nil) (nonneg_int nonempty-type-eq-decl nil integers nil) (posint nonempty-type-eq-decl nil integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil)) nil))("pr-ack" pr_ack pr_build_h_m_TCC2 0 (pr_build_h_m_TCC2-1 nil 3756843421 ("" (subtype-tcc) nil nil) nil nil))("pr-ack" pr_ack pr_build_h_m_TCC1 0 (pr_build_h_m_TCC1-1 nil 3756843421 ("" (subtype-tcc) nil nil) nil nil))("pr-ack" pr_ack expand_args_TCC2 0 (expand_args_TCC2-1 nil 3756843421 ("" (subtype-tcc) nil nil) nil nil))("pr-ack" pr_ack expand_args_TCC1 0 (expand_args_TCC1-1 nil 3756843421 ("" (subtype-tcc) nil nil) nil nil))("pr-ack" pr_ack pr_TCC7 0 (pr_TCC7-1 nil 3757008441 ("" (termination-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_lt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil)) nil))("pr-ack" pr_ack sub_args_TCC4 0 (sub_args_TCC4-1 nil 3756843421 ("" (subtype-tcc) nil nil) nil nil))("pr-ack" pr_ack sub_args_TCC3 0 (sub_args_TCC3-1 nil 3756843421 ("" (subtype-tcc) nil nil) ((posint_plus_nnint_is_posint application-judgement "posint" integers nil)) nil))("pr-ack" pr_ack sub_args_TCC2 0 (sub_args_TCC2-1 nil 3756843421 ("" (subtype-tcc) nil nil) ((posint_plus_nnint_is_posint application-judgement "posint" integers nil)) nil))("pr-ack" pr_ack sub_args_TCC1 0 (sub_args_TCC1-1 nil 3756843421 ("" (subtype-tcc) nil nil) ((posint_plus_nnint_is_posint application-judgement "posint" integers nil)) nil))("pr-ack" pr_ack comp_build_m_TCC1 0 (comp_build_m_TCC1-1 nil 3757143511 ("" (subtype-tcc) nil nil) nil nil))("pr-ack" pr_ack ack_prop2 0 (ack_prop2-1 nil 3757239184 ("" (induct "x") (("1" (skolem!) (("1" (skolem!) (("1" (flatten) (("1" (expand "ack") (("1" (assert) nil nil)) nil)) nil)) nil)) nil) ("2" (skolem 1 "m0") (("2" (flatten) (("2" (induct "y") (("1" (skolem 1 "z1") (("1" (flatten) (("1" (assert) nil nil)) nil)) nil) ("2" (skolem 1 "x0") (("2" (flatten) (("2" (skolem 1 "y0") (("2" (flatten) (("2" (expand "ack" 1 1) (("2" (inst -1 "y0") (("2" (case "x0 = y0") (("1" (postpone) nil nil) ("2" (postpone) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) nil shostak))("pr-ack" pr_ack ack_prop1 0 (ack_prop1-1 nil 3757238276 ("" (induct "x") (("1" (skolem!) (("1" (expand "ack") (("1" (assert) nil nil)) nil)) nil) ("2" (skolem!) (("2" (flatten) (("2" (induct "y") (("1" (expand "ack" 1) (("1" (inst - "1") (("1" (assert) nil nil)) nil)) nil) ("2" (skolem!) (("2" (flatten) (("2" (expand "ack" 1) (("2" (inst - "ack(1 + j!1, j!2)") (("2" (assert) nil nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil)) nil) ((nnint_plus_posint_is_posint application-judgement "posint" integers nil) (posint_plus_nnint_is_posint application-judgement "posint" integers nil) (real_gt_is_strict_total_order name-judgement "(strict_total_order?[real])" real_props nil) (nat_induction formula-decl nil naturalnumbers nil) (+ const-decl "[numfield, numfield -> numfield]" number_fields nil) (numfield nonempty-type-eq-decl nil number_fields nil) (ack def-decl "nat" pr_ack nil) (> const-decl "bool" reals nil) (pred type-eq-decl nil defined_types nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (>= const-decl "bool" reals nil) (bool nonempty-type-eq-decl nil booleans nil) (int nonempty-type-eq-decl nil integers nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (rational nonempty-type-from-decl nil rationals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (real nonempty-type-from-decl nil reals nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (number_field nonempty-type-from-decl nil number_fields nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (boolean nonempty-type-decl nil booleans nil) (number nonempty-type-decl nil numbers nil) (nnint_plus_nnint_is_nnint application-judgement "nonneg_int" integers nil)) shostak))("pr-ack" pr_ack all_of?_TCC4 0 (all_of?_TCC4-1 nil 3757237060 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (int_minus_int_is_int application-judgement "int" integers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil)) nil))("pr-ack" pr_ack all_of?_TCC3 0 (all_of?_TCC3-1 nil 3757237060 ("" (termination-tcc) nil nil) nil nil))("pr-ack" pr_ack all_of?_TCC2 0 (all_of?_TCC2-1 nil 3757237060 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))("pr-ack" pr_ack all_of?_TCC1 0 (all_of?_TCC1-1 nil 3757233482 ("" (subtype-tcc) nil nil) ((boolean nonempty-type-decl nil booleans nil) (bool nonempty-type-eq-decl nil booleans nil) (NOT const-decl "[bool -> bool]" booleans nil) (number nonempty-type-decl nil numbers nil) (number_field_pred const-decl "[number -> boolean]" number_fields nil) (number_field nonempty-type-from-decl nil number_fields nil) (real_pred const-decl "[number_field -> boolean]" reals nil) (real nonempty-type-from-decl nil reals nil) (>= const-decl "bool" reals nil) (rational_pred const-decl "[real -> boolean]" rationals nil) (rational nonempty-type-from-decl nil rationals nil) (integer_pred const-decl "[rational -> boolean]" integers nil) (int nonempty-type-eq-decl nil integers nil) (nat nonempty-type-eq-decl nil naturalnumbers nil) (real_ge_is_total_order name-judgement "(total_order?[real])" real_props nil) (int_minus_int_is_int application-judgement "int" integers nil)) nil))